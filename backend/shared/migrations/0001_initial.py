# Generated by Django 5.1.6 on 2025-02-08 00:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alumni',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date_debut', models.DateTimeField(auto_now_add=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('AI', 'Artificial Intelligence'), ('ML', 'Machine Learning'), ('Deep Learning', 'Deep Learning'), ('Data Science', 'Data Science'), ('Big Data', 'Big Data'), ('Cybersecurity', 'Cybersecurity'), ('Blockchain', 'Blockchain'), ('Cloud Computing', 'Cloud Computing'), ('DevOps', 'DevOps'), ('IoT', 'Internet of Things'), ('AR/VR', 'Augmented & Virtual Reality'), ('Web Development', 'Web Development'), ('Mobile Development', 'Mobile Development'), ('Game Development', 'Game Development'), ('Networking', 'Networking'), ('Embedded Systems', 'Embedded Systems'), ('Software Engineering', 'Software Engineering'), ('Databases', 'Databases'), ('Cryptography', 'Cryptography'), ('Computer Vision', 'Computer Vision'), ('NLP', 'Natural Language Processing'), ('UI/UX', 'User Experience & Design'), ('Open Source', 'Open Source'), ('Physics', 'Physics'), ('Chemistry', 'Chemistry'), ('Biology', 'Biology'), ('Mathematics', 'Mathematics'), ('Aerospace', 'Aerospace Engineering'), ('Robotics', 'Robotics'), ('Electronics', 'Electronics'), ('Mechanical Engineering', 'Mechanical Engineering'), ('Civil Engineering', 'Civil Engineering'), ('Biotechnology', 'Biotechnology'), ('Environmental Science', 'Environmental Science'), ('Astronomy', 'Astronomy'), ('Geology', 'Geology'), ('Business', 'Business'), ('Entrepreneurship', 'Entrepreneurship'), ('Startups', 'Startups'), ('Finance', 'Finance'), ('Economics', 'Economics'), ('Marketing', 'Marketing'), ('Investing', 'Investing'), ('Cryptocurrency', 'Cryptocurrency'), ('E-Commerce', 'E-Commerce'), ('Stock Market', 'Stock Market'), ('Product Management', 'Product Management'), ('Sales', 'Sales'), ('Leadership', 'Leadership'), ('HR', 'Human Resources'), ('Philosophy', 'Philosophy'), ('History', 'History'), ('Literature', 'Literature'), ('Music', 'Music'), ('Visual Arts', 'Visual Arts'), ('Photography', 'Photography'), ('Film', 'Film'), ('Theater', 'Theater'), ('Architecture', 'Architecture'), ('Design', 'Design'), ('Writing', 'Writing'), ('Poetry', 'Poetry'), ('Psychology', 'Psychology'), ('Healthcare', 'Healthcare'), ('Medicine', 'Medicine'), ('Mental Health', 'Mental Health'), ('Fitness', 'Fitness'), ('Nutrition', 'Nutrition'), ('Sports', 'Sports'), ('Yoga', 'Yoga'), ('Self Improvement', 'Self Improvement'), ('Travel', 'Travel'), ('Culinary Arts', 'Culinary Arts'), ('Politics', 'Politics'), ('Social Justice', 'Social Justice'), ('Environmentalism', 'Environmentalism'), ('Climate Change', 'Climate Change'), ('Education', 'Education'), ('Law', 'Law'), ('Ethics', 'Ethics'), ('Memes', 'Memes'), ('Cars', 'Cars'), ('Anime', 'Anime'), ('Gaming', 'Gaming'), ('Esports', 'Esports'), ('DIY', 'DIY & Crafts'), ('Hacking', 'Hacking'), ('Space', 'Space Exploration'), ('Science Fiction', 'Science Fiction'), ('Future Tech', 'Future Technologies')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('liste_question', models.JSONField()),
                ('reponses', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_image', models.URLField()),
                ('description', models.TextField()),
                ('number_of_followers', models.IntegerField(default=0)),
                ('alumni', models.ManyToManyField(related_name='alumnis_club', to='shared.alumni')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shared.post')),
            ],
            bases=('shared.post',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shared.post')),
                ('github_link', models.URLField()),
            ],
            bases=('shared.post',),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('author', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('title', models.CharField(max_length=255)),
                ('file_url', models.URLField()),
                ('level', models.IntegerField(choices=[(50, 'beginner'), (100, 'Medium'), (150, 'Advanced')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='shared.club')),
                ('tags', models.ManyToManyField(related_name='resources', to='shared.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Roadmap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('public', 'Public')], default='private', max_length=10)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roadmaps', to='shared.club')),
                ('tags', models.ManyToManyField(related_name='roadmaps', to='shared.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club_joined', models.ManyToManyField(related_name='students_joined', to='shared.club')),
                ('club_suivi', models.ManyToManyField(related_name='students_suivi', to='shared.club')),
                ('roadmap_enroll', models.ManyToManyField(related_name='students_enrolled', to='shared.roadmap')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('agenda_events', models.ManyToManyField(related_name='students_agenda', to='shared.event')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(related_name='posts', to='shared.tag'),
        ),
        migrations.CreateModel(
            name='LessonPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shared.resource')),
                ('roadmap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_parts', to='shared.roadmap')),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shared.test')),
            ],
        ),
        migrations.CreateModel(
            name='PostInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('liked', models.BooleanField(default=False)),
                ('saved_to_agenda', models.BooleanField(default=False)),
                ('consulted', models.IntegerField(default=0)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='shared.post')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_interactions', to='shared.student')),
            ],
            options={
                'unique_together': {('student', 'post')},
            },
        ),
    ]
